#!/bin/bash

# üîß RESOLU√á√ÉO SIST√äMICA DE IMPEDIMENTOS T√âCNICOS
# An√°lise estrat√©gica e corre√ß√£o de problemas identificados no setup

echo "üéØ DIAGN√ìSTICO E RESOLU√á√ÉO DE IMPEDIMENTOS T√âCNICOS"
echo "üìä Status: Extra√ß√£o conclu√≠da, configura√ß√£o requer ajustes sist√™micos"

cd /Users/lucasrnobrega/Claude-outputs/Projetos/agentesdeconversao

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "  FASE 1: RESOLU√á√ÉO DE PROBLEMAS DE NETWORKING"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

echo "üîç Diagn√≥stico: ERR_PNPM_META_FETCH_FAIL detectado"
echo "üéØ Estrat√©gia: M√∫ltiplas abordagens de resolu√ß√£o"

# Verificar conectividade b√°sica
echo "üì° Testando conectividade com npm registry..."
curl -I https://registry.npmjs.org/ || echo "‚ö†Ô∏è  Problema de conectividade detectado"

echo ""
echo "üîß SOLU√á√ïES ALTERNATIVAS PARA PNPM:"
echo ""
echo "OP√á√ÉO 1 - Limpar cache e tentar novamente:"
echo "pnpm store prune"
echo "rm -rf node_modules package-lock.json pnpm-lock.yaml"
echo "pnpm install --force"
echo ""
echo "OP√á√ÉO 2 - Usar npm como fallback:"
echo "npm install --legacy-peer-deps"
echo ""
echo "OP√á√ÉO 3 - Configurar proxy/registry:"
echo "pnpm config set registry https://registry.npmjs.org/"
echo "pnpm config set network-timeout 300000"
echo ""

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "  FASE 2: CONFIGURA√á√ÉO DE WORKSPACE PNPM"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

echo "üì¶ Criando pnpm-workspace.yaml..."

cat > pnpm-workspace.yaml << 'EOF'
packages:
  - 'apps/*'
  - 'packages/*'
  - 'packages/ui-enterprise'
  - 'packages/components'
  - 'packages/server' 
  - 'packages/prisma'
  - 'packages/integrations'
  - 'packages/lib'
EOF

echo "‚úÖ pnpm-workspace.yaml criado"

# Atualizar package.json para remover workspaces field
echo "üîß Atualizando package.json..."

# Backup do package.json
cp package.json package.json.backup

# Criar vers√£o corrigida do package.json
cat > package.json << 'EOF'
{
  "name": "agentes-de-conversao",
  "version": "1.0.0",
  "description": "üöÄ A PLATAFORMA que vai DOMINAR o mercado de Agentes IA",
  "private": true,
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev --parallel",
    "lint": "turbo run lint", 
    "clean": "turbo run clean",
    "db:generate": "cd packages/prisma && prisma generate",
    "db:push": "cd packages/prisma && prisma db push",
    "db:studio": "cd packages/prisma && prisma studio",
    "start:server": "cd packages/server && pnpm start",
    "start:ui": "cd packages/ui && pnpm dev",
    "start:dashboard": "cd apps/dashboard && pnpm dev",
    "test": "turbo run test",
    "install:clean": "rm -rf node_modules pnpm-lock.yaml && pnpm install",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "setup": "./scripts/setup-environment.sh"
  },
  "devDependencies": {
    "turbo": "^1.13.4",
    "@types/node": "^20.0.0",
    "typescript": "^5.0.0"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "pnpm": ">=8.0.0"
  }
}
EOF

echo "‚úÖ package.json atualizado para compatibilidade com pnpm"

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "  FASE 3: CONFIGURA√á√ÉO DE INFRAESTRUTURA DOCKER"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

echo "üê≥ Verificando status do Docker..."

# Verificar se Docker est√° instalado
if command -v docker &> /dev/null; then
    echo "‚úÖ Docker detectado"
    
    # Verificar se Docker est√° rodando
    if docker info &> /dev/null; then
        echo "‚úÖ Docker daemon rodando"
        echo "üöÄ Iniciando infraestrutura..."
        docker-compose up -d
    else
        echo "‚ö†Ô∏è  Docker daemon n√£o est√° rodando"
        echo ""
        echo "üîß SOLU√á√ïES:"
        echo "1. Abra Docker Desktop manualmente"
        echo "2. Ou execute: open -a Docker"
        echo "3. Aguarde o Docker inicializar completamente"
        echo "4. Execute novamente: docker-compose up -d"
    fi
else
    echo "‚ùå Docker n√£o encontrado"
    echo ""
    echo "üîß INSTALA√á√ÉO NECESS√ÅRIA:"
    echo "1. Baixe Docker Desktop: https://docker.com/products/docker-desktop"
    echo "2. Instale e inicie o Docker Desktop"
    echo "3. Execute novamente este script"
fi

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "  FASE 4: CONFIGURA√á√ÉO DE AMBIENTE SIMPLIFICADA"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

echo "‚öôÔ∏è Criando configura√ß√£o de ambiente simplificada..."

# Criar .env mais simples para desenvolvimento local
cat > .env << 'EOF'
# ======= AGENTES DE CONVERS√ÉO - DESENVOLVIMENTO LOCAL =======

# Database (SQLite para desenvolvimento r√°pido)
DATABASE_URL="file:./dev.db"
DIRECT_URL="file:./dev.db"

# Supabase (opcional para desenvolvimento inicial)
SUPABASE_URL="http://localhost:54321"
SUPABASE_ANON_KEY="your-anon-key-here"
SUPABASE_SERVICE_KEY="your-service-key-here"

# OpenRouter (necess√°rio para AI features)
OPENROUTER_API_KEY="your-openrouter-key-here"

# Redis (opcional - fallback para in-memory)
REDIS_URL="redis://localhost:6379"

# WhatsApp (opcional para desenvolvimento inicial)
WHATSAPP_TOKEN="your-whatsapp-token"
EVOLUTION_API_KEY="your-evolution-key"

# JWT Secret
JWT_SECRET="super-secret-jwt-key-for-development-only"

# Environment
NODE_ENV="development"
PORT=3000
EOF

echo "‚úÖ .env criado com configura√ß√£o de desenvolvimento"

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "  FASE 5: SETUP MINIMAL PARA DESENVOLVIMENTO R√ÅPIDO"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# Criar script de setup m√≠nimo
mkdir -p scripts

cat > scripts/setup-minimal.sh << 'SETUP_EOF'
#!/bin/bash

echo "üöÄ SETUP M√çNIMO PARA DESENVOLVIMENTO R√ÅPIDO"

# Limpar instala√ß√µes anteriores
echo "üßπ Limpando ambiente..."
rm -rf node_modules pnpm-lock.yaml

# Tentar instala√ß√£o com diferentes estrat√©gias
echo "üì¶ Instala√ß√£o de depend√™ncias (m√©todo 1: pnpm)..."
if pnpm install; then
    echo "‚úÖ Instala√ß√£o pnpm bem-sucedida"
else
    echo "‚ö†Ô∏è  pnpm falhou, tentando npm..."
    if npm install --legacy-peer-deps; then
        echo "‚úÖ Instala√ß√£o npm bem-sucedida"
    else
        echo "‚ùå Ambas instala√ß√µes falharam"
        echo "üîß Tente resolver problemas de rede/proxy"
        exit 1
    fi
fi

# Verificar se Prisma existe e configurar banco simples
if [ -d "packages/prisma" ]; then
    echo "üóÑÔ∏è Configurando banco de desenvolvimento..."
    cd packages/prisma
    
    # Gerar cliente Prisma
    if command -v prisma &> /dev/null; then
        prisma generate
        prisma db push
        echo "‚úÖ Banco configurado"
    else
        echo "‚ö†Ô∏è  Prisma n√£o encontrado, pulando configura√ß√£o do banco"
    fi
    
    cd ../..
fi

echo ""
echo "‚úÖ SETUP M√çNIMO CONCLU√çDO!"
echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "1. Se Docker dispon√≠vel: docker-compose up -d"
echo "2. Configure suas chaves no .env (principalmente OPENROUTER_API_KEY)"
echo "3. Execute: pnpm dev (ou npm run dev)"
echo "4. Acesse: http://localhost:3000"
SETUP_EOF

chmod +x scripts/setup-minimal.sh

echo ""
echo "‚úÖ RESOLU√á√ÉO DE IMPEDIMENTOS CONCLU√çDA!"
echo ""
echo "üéØ ESTRAT√âGIAS DE EXECU√á√ÉO DISPON√çVEIS:"
echo ""
echo "ESTRAT√âGIA 1 - Setup Completo (se Docker dispon√≠vel):"
echo "1. open -a Docker  # Iniciar Docker Desktop"
echo "2. ./scripts/setup-minimal.sh"
echo "3. docker-compose up -d"
echo ""
echo "ESTRAT√âGIA 2 - Setup M√≠nimo (desenvolvimento local):"
echo "1. ./scripts/setup-minimal.sh"
echo "2. Edite .env com suas chaves"
echo "3. pnpm dev"
echo ""
echo "ESTRAT√âGIA 3 - Resolu√ß√£o Manual de Rede:"
echo "1. pnpm config set registry https://registry.npmjs.org/"
echo "2. pnpm store prune"
echo "3. pnpm install --force"
echo ""
echo "üí° RECOMENDA√á√ÉO: Comece com ESTRAT√âGIA 2 para desenvolvimento r√°pido"
echo ""
echo "üö® PR√ìXIMO PASSO CR√çTICO:"
echo "Execute: ./scripts/setup-minimal.sh"

